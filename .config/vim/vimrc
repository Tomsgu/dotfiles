"------------------------------------------------------------------------------
" Plugins setup
"------------------------------------------------------------------------------
set nocompatible " Disable vi-compatibility.
set encoding=UTF-8

" Specify directory for plugins.
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'altercation/vim-colors-solarized'
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/syntastic'
Plug 'vimwiki/vimwiki'

" Icons for NERDtree
Plug 'ryanoasis/vim-devicons'

" autocomplete (), [], {}, etc
Plug 'jiangmiao/auto-pairs'

" Php autocompletion on top of coc.
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'phpactor/phpactor', {'for': 'php', 'branch': 'master', 'do': 'composer install --no-dev -o'}

" See git status of a current line
Plug 'airblade/vim-gitgutter'

" Suround selected text with any character.
Plug 'tpope/vim-surround'

"Plug 'ctrlp.vim'
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
call plug#end()

"------------------------------------------------------------------------------
"ctrlp plugin setup
let g:ctrlp_match_window = 'bottom,order:ttb' " sort results from top to bottom
set t_Co=256
set guifont=menlo\ for\ powerline:h13
set linespace=13



"------------------------------------------------------------------------------
" Setup spell checking for english
set spell spelllang=en_us

"------------------------------------------------------------------------------
" Set solarized colorscheme
let g:solarized_termtrans = 1
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

"------------------------------------------------------------------------------
" Airline plugin setup
let g:airline_powerline_fonts = 1
let g:lightline = { 'colorscheme': 'solarized', }
set laststatus=2                              " Without this it cannot be shown.
set ttimeoutlen=50

"------------------------------------------------------------------------------
" NERDtree setup
" 1. If the NERDtree is the last window open close it as well.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" 2. Open/close NERDTree by <ctrl-n> key.
map <C-n> :NERDTreeToggle<CR>
" Icons for NERDtree setup
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_conceal_nerdtree_brackets = 1

"------------------------------------------------------------------------------
" vimwiki setup
let g:vimwiki_list = [{'path': '~/vimwiki/',
            \ 'syntax': 'markdown', 'ext': '.md'}] " Use markdown syntax
let g:vimwiki_customwiki2html=$HOME.'/.vim/plugged/vimwiki/autoload/vimwiki/customwiki2html.sh'

"-----------------------------------------------------------------------------
" right side horizontal line with 100 character length
let &colorcolumn=join(range(101,999),",")
highlight ColorColumn ctermbg=4

"-----------------------------------------------------------------------------
" Vim setup
set showmode                    " always show what mode we're currently editing in
set nowrap                      " don't wrap lines
set tabstop=4                   " a tab is four spaces
set smarttab
set tags=tags
set softtabstop=4               " when hitting <BS>, pretend like a tab is removed, even if spaces
set expandtab                   " expand tabs by default (overloadable per file type later)
set shiftwidth=4
set shiftround                  " use multiple of shiftwidth when indenting with '<' and '>'
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set autoindent                  " always set autoindenting on
set copyindent                  " copy the previous indentation on autoindenting
set number                      " always show line numbers
set ignorecase                  " ignore case when searching
set smartcase                   " ignore case if search pattern is all lowercase,
set timeout timeoutlen=200 ttimeoutlen=100
set visualbell                  " don't beep
set noerrorbells                " don't beep
set noeb vb t_vb=               " Disable screen flashing
set autowrite                   "Save on buffer switch
set mouse=a
set noshowmode                  " Don't show the mode, lightline already shows mode info.
set clipboard=unnamedplus           " Use a system clipboard.
map <C-l> mzgg=G`z

" easier move screen up/down
nmap <C-j> <C-e>
nmap <C-k> <C-y>
syntax enable

" Display lines
set number
set numberwidth=3
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
set wildmode=full
set shiftwidth=4
filetype plugin indent on

" Ability to use clipboard under wayland

xnoremap "+y y:call system("wl-copy", @")<cr>
nnoremap "+p :let @"=substitute(system("wl-paste --no-newline"), '<C-v><C-m>', '', 'g')<cr>p
nnoremap "*p :let @"=substitute(system("wl-paste --no-newline --primary"), '<C-v><C-m>', '', 'g')<cr>p

" coc autocompletion with <TAB> key
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
